// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"project/app"
	"project/app/handler"
	"project/app/pkg/cache"
	"project/app/pkg/config"
	"project/app/pkg/sms"
	"project/app/service"
)

// Injectors from wire.go:

func CreateApp(configFiles ...config.FilePath) (*app.App, func(), error) {
	viper, err := config.NewViper(configFiles...)
	if err != nil {
		return nil, nil, err
	}
	isDebug := config.NewIsDebug(viper)
	httpAddresses := app.NewHttpAddresses(viper)
	logger, cleanup, err := handler.NewZapLogger(isDebug, viper)
	if err != nil {
		return nil, nil, err
	}
	loggerMiddleware := handler.NewLoggerMiddleware(logger)
	recoveryMiddleware := _wireRecoveryMiddlewareValue
	aliyunLoginSms := sms.NewAliyunLoginSms(viper)
	cacheCache := cache.NewGoCache()
	loginSmsService := service.NewLoginSmsService(aliyunLoginSms, cacheCache)
	loginSmsCtrl := handler.NewLoginSmsCtrl(loginSmsService)
	appApp := app.NewApp(isDebug, httpAddresses, loggerMiddleware, recoveryMiddleware, loginSmsCtrl)
	return appApp, func() {
		cleanup()
	}, nil
}

var (
	_wireRecoveryMiddlewareValue = &handler.RecoveryMiddleware{}
)

// wire.go:

var providerSet = wire.NewSet(config.NewViper, config.NewIsDebug, cache.NewGoCache, app.NewApp, app.NewHttpAddresses, handler.NewLoggerMiddleware, handler.NewZapLogger, wire.Value(&handler.RecoveryMiddleware{}), handler.NewLoginSmsCtrl, service.NewLoginSmsService, wire.Bind(new(service.ISms), new(*service.LoginSmsService)), sms.NewAliyunLoginSms, wire.Bind(new(sms.Sender), new(*sms.AliyunLoginSms)))
